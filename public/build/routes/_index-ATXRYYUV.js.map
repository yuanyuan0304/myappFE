{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.tsx\");\n  import.meta.hot.lastModified = \"1751416941433.0571\";\n}\n// REMIX HMR END\n\nimport { Form, useLoaderData, useFetcher, Link, redirect, json } from \"@remix-run/react\";\nimport { useState } from \"react\";\nexport const meta = () => {\n  return [{\n    title: \"User Management\"\n  }, {\n    name: \"description\",\n    content: \"CRUD operations for users\"\n  }];\n};\n\n// Load all users or single user based on URL\nexport async function loader({\n  request,\n  params\n}) {\n  const url = new URL(request.url);\n  const userId = url.searchParams.get(\"id\") || params.id;\n  const response = userId ? await fetch(\"http://localhost:8080/api/getUserById\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: userId\n    })\n  }) : await fetch(\"http://localhost:8080/api/getAllUsers\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({})\n  });\n  if (!response.ok) {\n    throw new Response(\"User not found\", {\n      status: 404\n    });\n  }\n  return await response.json();\n}\n\n// Handle all actions (create, update, delete)\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const actionType = formData.get(\"_action\");\n  const userId = formData.get(\"id\");\n  try {\n    switch (actionType) {\n      case \"create\":\n        const newUser = {\n          name: formData.get(\"name\"),\n          email: formData.get(\"email\")\n        };\n        await fetch(\"http://localhost:8080/api/createUser\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(newUser)\n        });\n        break;\n      case \"update\":\n        const updatedUser = {\n          id: userId,\n          name: formData.get(\"name\"),\n          email: formData.get(\"email\")\n        };\n        await fetch(`http://localhost:8080/api/updateUser`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(updatedUser)\n        });\n        break;\n      case \"delete\":\n        await fetch(`http://localhost:8080/api/deleteUser`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: userId\n          })\n        });\n        break;\n      default:\n        throw new Error(\"Invalid action\");\n    }\n    return redirect(\"/\");\n  } catch (error) {\n    return json({\n      error: error instanceof Error ? error.message : \"Unknown error\"\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function UsersPage() {\n  _s();\n  const users = useLoaderData();\n  const fetcher = useFetcher();\n  const [editingId, setEditingId] = useState(null);\n  return <div style={{\n    fontFamily: \"system-ui, sans-serif\",\n    lineHeight: \"1.8\"\n  }}>\n      <h1>User Management</h1>\n\n      {/* Create User Form */}\n      <div style={{\n      marginBottom: \"2rem\"\n    }}>\n        <h2>Create New User</h2>\n        <Form method=\"post\">\n          <input type=\"hidden\" name=\"_action\" value=\"create\" />\n          <div>\n            <label>\n              Name:\n              <input type=\"text\" name=\"name\" required />\n            </label>\n          </div>\n          <div>\n            <label>\n              Email:\n              <input type=\"email\" name=\"email\" required />\n            </label>\n          </div>\n          <button type=\"submit\">Create</button>\n        </Form>\n      </div>\n\n      {/* Users List */}\n      <h2>Users List</h2>\n      {Array.isArray(users) ? <ul style={{\n      listStyle: \"none\",\n      padding: 0\n    }}>\n          {users.map(user => <li key={user.id} style={{\n        marginBottom: \"1rem\",\n        padding: \"1rem\",\n        border: \"1px solid #ddd\"\n      }}>\n              {editingId === user.id ? <fetcher.Form method=\"post\">\n                  <input type=\"hidden\" name=\"_action\" value=\"update\" />\n                  <input type=\"hidden\" name=\"id\" value={user.id} />\n                  <div>\n                    <label>\n                      Name:\n                      <input type=\"text\" name=\"name\" defaultValue={user.name} required />\n                    </label>\n                  </div>\n                  <div>\n                    <label>\n                      Email:\n                      <input type=\"email\" name=\"email\" defaultValue={user.email} required />\n                    </label>\n                  </div>\n                  <button type=\"submit\">Save</button>\n                  <button type=\"button\" onClick={() => setEditingId(null)}>\n                    Cancel\n                  </button>\n                </fetcher.Form> : <>\n                  <div>ID: {user.id}</div>\n                  <div>Name: {user.name}</div>\n                  <div>Email: {user.email}</div>\n                  <div>\n                    Created: {new Date(user.createdAt).toLocaleString()}\n                  </div>\n                  <div style={{\n            marginTop: \"0.5rem\"\n          }}>\n                    <button onClick={() => setEditingId(user.id)}>Edit</button>\n                    <Form method=\"post\" style={{\n              display: \"inline\",\n              marginLeft: \"0.5rem\"\n            }}>\n                      <input type=\"hidden\" name=\"_action\" value=\"delete\" />\n                      <input type=\"hidden\" name=\"id\" value={user.id} />\n                      <button type=\"submit\">Delete</button>\n                    </Form>\n                  </div>\n                </>}\n            </li>)}\n        </ul> : <div style={{\n      padding: \"1rem\",\n      border: \"1px solid #ddd\"\n    }}>\n          <h3>Single User View</h3>\n          <div>ID: {users.id}</div>\n          <div>Name: {users.name}</div>\n          <div>Email: {users.email}</div>\n          <div>Created: {new Date(users.created_at).toLocaleString()}</div>\n          <div style={{\n        marginTop: \"1rem\"\n      }}>\n            <Link to=\"/\">Back to all users</Link>\n          </div>\n        </div>}\n    </div>;\n}\n_s(UsersPage, \"o+IG1Zd1/uMTQjRDVJoIFNesECU=\", false, function () {\n  return [useLoaderData, useFetcher];\n});\n_c = UsersPage;\nexport function ErrorBoundary() {\n  return <div style={{\n    padding: \"1rem\",\n    color: \"red\"\n  }}>\n      <h2>Error</h2>\n      <p>Something went wrong while processing your request.</p>\n      <Link to=\"/\">Return to users list</Link>\n    </div>;\n}\n_c2 = ErrorBoundary;\nvar _c, _c2;\n$RefreshReg$(_c, \"UsersPage\");\n$RefreshReg$(_c2, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
